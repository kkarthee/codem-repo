#!/opt/puppetlabs/puppet/bin/ruby

require "net/https"
require "json"
require "uri"
require 'time'
require 'optparse'
require 'yaml'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: tk_metrics [options]"

  opts.on('-p', '--[no-]print', 'Print to stdout') { |p| options[:print] = p }
  opts.on('-m [TYPE]', '--metrics_type [TYPE]', 'Type of metric to collect') { |v| options[:metrics_type] = v }
  opts.on('-o [DIR]', '--output-dir [DIR]', 'Directory to save output to') { |o| options[:output_dir] = o }
  opts.on('--metrics_port [PORT]', 'The port the metrics service runs on') { |port| options[:metrics_port] = port }
  opts.on('--[no-]ssl', 'Whether or not to use SSL when gather metrics') { |ssl| options[:ssl] = ssl }
end.parse!

if options[:metrics_type].nil? then
  STDERR.puts '--metrics_type (-m) is a required argument'
  exit 1
end

METRICS_TYPE = options[:metrics_type]
config = YAML.load_file(File.join(File.dirname(File.expand_path(__FILE__)),"#{METRICS_TYPE}_config.yaml"))

def coalesce ( opt1, opt2, default=nil )
  if opt1.nil? then
    if opt2.nil? then
      default
    else
      opt2
    end
  else
    opt1
  end
end

OUTPUT_DIR = options[:output_dir]
HOSTS      = config['hosts']
PORT       = coalesce(options[:metrics_port], config['metrics_port'])
METRICS    = config['additional_metrics']
CLIENTCERT = config['clientcert']
PE_VERSION = config['pe_version']
SSL        = coalesce(options[:ssl], config['ssl'], true)

$error_array = []

def setup_connection(url, ssl)
  uri  = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  if ssl then
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end

  return http,uri
end

def get_endpoint(url,ssl)
  http,uri = setup_connection(url,ssl)

  data = JSON.parse(http.get(uri.request_uri).body)
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

def post_endpoint(url,post_data,ssl)
  http,uri = setup_connection(url,ssl)

  request = Net::HTTP::Post.new(uri.request_uri)
  request.content_type = 'application/json'
  request.body = post_data

  data = JSON.parse(http.request(request).body)
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

def generate_host_url(host, port, ssl)
  if ssl then
    protocol = 'https'
  else
    protocol = 'http'
  end

  host_url = "#{protocol}://#{host}:#{port}"
end

def get_status_endpoint(host, port, ssl)
  host_url = generate_host_url(host, port, ssl)

  status_endpoint = "#{host_url}/status/v1/services?level=debug"
  status_output   = get_endpoint(status_endpoint,ssl)
end

def bulk_retrieve_additional_metrics(host, port, metrics, ssl)
  host_url = generate_host_url(host, port, ssl)

  post_data = []
  metrics.each do |metric|
    post_data << metric['url']
  end

  endpoint = "#{host_url}/metrics/v1/mbeans"
  metrics_output = post_endpoint(endpoint, post_data.to_json, ssl)
  metrics_array = []

  metrics.each_index do |index|
    metric_name = metrics[index]['name']
    metric_data = metrics_output[index]

    metrics_array << { 'name' => metric_name,
                       'data' => metric_data  }
  end

  return metrics_array
end

def individually_retrieve_additional_metrics(host, port, metrics, ssl)
  host_url = generate_host_url(host, port, ssl)

  metrics_array = []
  metrics.each do |metric|
    endpoint = URI.escape("#{host_url}/metrics/v1/mbeans/#{metric['url']}")
    metrics_array <<  { 'name' => metric['name'],
                        'data' => get_endpoint(endpoint, ssl) }
  end

  return metrics_array
end

def retrieve_additional_metrics(host,port,metrics,pe_version, ssl)
  if Gem::Version.new(pe_version) < Gem::Version.new('2016.2.0') then
    metrics_array = individually_retrieve_additional_metrics(host, port, metrics, ssl)
  else
    metrics_array = bulk_retrieve_additional_metrics(host, port, metrics, ssl)
  end

  return metrics_array
end

filename = Time.now.utc.strftime('%Y%m%dT%H%M%SZ') + '.json'

HOSTS.each do |host|
  begin
    timestamp = Time.now
    dataset = {'timestamp' => timestamp.utc.iso8601, 'servers' => {}}
    hostkey = host.gsub('.', '-')

    status_output   = get_status_endpoint(host, PORT, SSL)
    dataset['servers'][hostkey] = {METRICS_TYPE => status_output}

    unless METRICS.empty? then
      metrics_array = retrieve_additional_metrics(host, PORT, METRICS, PE_VERSION, SSL)

      metrics_array.each do |metric_hash|
        metric_name = metric_hash['name']
        metric_data = metric_hash['data']

        dataset['servers'][hostkey][METRICS_TYPE][metric_name] = metric_data
      end
    end

    dataset['servers'][hostkey][METRICS_TYPE]['error'] = $error_array
    dataset['servers'][hostkey][METRICS_TYPE]['error_count'] = $error_array.count
    dataset['servers'][hostkey][METRICS_TYPE]['api-query-start'] = timestamp.utc.iso8601
    dataset['servers'][hostkey][METRICS_TYPE]['api-query-duration'] = Time.now - timestamp

    json_dataset = JSON.pretty_generate(dataset)

    unless OUTPUT_DIR.nil? then
      Dir.chdir(OUTPUT_DIR) do
        Dir.mkdir(host) unless File.exist?(host)
        File.open(File.join(host, filename), 'w') do |file|
          file.write(json_dataset)
        end
      end
    end
    if options[:print] != false then
      STDOUT.write(json_dataset)
    end
  end
end
